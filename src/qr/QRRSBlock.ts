export class QRRSBlock {
  totalCount: number
  dataCount: number

  constructor(totalCount: number, dataCount: number) {
    this.totalCount = totalCount
    this.dataCount = dataCount
  }

  private static RS_BLOCK_TABLE: number[][] = [
    // L
    [1, 26, 19],
    [1, 44, 34],
    [1, 70, 55],
    [1, 100, 80],
    [1, 134, 108],
    [2, 86, 68],
    [2, 98, 78],
    [2, 121, 97],
    [2, 146, 116],
    [2, 86, 68, 2, 87, 69],
    [4, 101, 81],
    [2, 116, 92, 2, 117, 93],
    [4, 133, 107],
    [3, 145, 115, 1, 146, 116],
    [5, 109, 87, 1, 110, 88],
    [5, 122, 98, 1, 123, 99],
    [1, 135, 107, 5, 136, 108],
    [5, 150, 120, 1, 151, 121],
    [3, 141, 113, 4, 142, 114],
    [3, 135, 107, 5, 136, 108],
    [4, 144, 116, 4, 145, 117],
    [2, 139, 111, 7, 140, 112],
    [4, 151, 121, 5, 152, 122],
    [6, 147, 117, 4, 148, 118],
    [8, 132, 106, 4, 133, 107],
    [10, 142, 114, 2, 143, 115],
    [8, 152, 122, 4, 153, 123],
    [3, 147, 117, 10, 148, 118],
    [7, 146, 116, 7, 147, 117],
    [5, 145, 115, 10, 146, 116],
    [13, 145, 115, 3, 146, 116],
    [17, 145, 115],
    [17, 145, 115, 1, 146, 116],
    [13, 145, 115, 6, 146, 116],
    [12, 151, 121, 7, 152, 122],
    [6, 151, 121, 14, 152, 122],
    [11, 151, 121, 13, 152, 122],
    [30, 151, 121],
    [22, 151, 121, 10, 152, 122],
    [20, 151, 121, 14, 152, 122],

    // M
    [1, 26, 16],
    [1, 44, 28],
    [1, 70, 44],
    [2, 50, 32],
    [2, 67, 43],
    [4, 43, 27],
    [4, 49, 31],
    [2, 60, 38, 2, 61, 39],
    [3, 58, 36, 2, 59, 37],
    [4, 69, 43, 1, 70, 44],
    [1, 80, 50, 4, 81, 51],
    [6, 58, 36, 2, 59, 37],
    [8, 59, 37, 1, 60, 38],
    [4, 64, 40, 5, 65, 41],
    [5, 65, 41, 5, 66, 42],
    [7, 73, 45, 3, 74, 46],
    [10, 74, 46, 1, 75, 47],
    [1, 73, 45, 15, 74, 46],
    [2, 74, 46, 17, 75, 47],
    [9, 69, 43, 4, 70, 44],
    [3, 70, 44, 11, 71, 45],
    [3, 67, 41, 13, 68, 42],
    [17, 74, 46],
    [17, 68, 42],
    [4, 75, 47, 14, 76, 48],
    [6, 73, 45, 14, 74, 46],
    [8, 75, 47, 13, 76, 48],
    [19, 74, 46, 4, 75, 47],
    [22, 73, 45, 3, 74, 46],
    [3, 73, 45, 23, 74, 46],
    [21, 73, 45, 7, 74, 46],
    [19, 75, 47, 10, 76, 48],
    [2, 74, 46, 29, 75, 47],
    [10, 74, 46, 23, 75, 47],
    [14, 74, 46, 21, 75, 47],
    [14, 74, 46, 23, 75, 47],
    [12, 75, 47, 26, 76, 48],
    [6, 75, 47, 34, 76, 48],
    [29, 74, 46, 14, 75, 47],
    [13, 74, 46, 32, 75, 47],

    // Q
    [1, 26, 13],
    [1, 44, 22],
    [2, 35, 17],
    [2, 50, 24],
    [2, 33, 15, 2, 34, 16],
    [4, 43, 19],
    [2, 32, 14, 4, 33, 15],
    [4, 40, 18, 2, 41, 19],
    [4, 36, 16, 4, 37, 17],
    [6, 43, 19, 2, 44, 20],
    [4, 50, 22, 4, 51, 23],
    [4, 46, 20, 6, 47, 21],
    [8, 44, 20, 4, 45, 21],
    [11, 36, 16, 5, 37, 17],
    [5, 54, 24, 7, 55, 25],
    [15, 43, 19, 2, 44, 20],
    [1, 50, 22, 15, 51, 23],
    [17, 50, 22, 1, 51, 23],
    [17, 47, 21, 4, 48, 22],
    [15, 54, 24, 5, 55, 25],
    [17, 50, 22, 6, 51, 23],
    [7, 51, 23, 16, 52, 24],
    [11, 54, 24, 14, 55, 25],
    [11, 50, 22, 16, 51, 23],
    [7, 54, 24, 22, 55, 25],
    [28, 50, 22, 6, 51, 23],
    [8, 53, 23, 26, 54, 24],
    [4, 54, 24, 31, 55, 25],
    [1, 53, 23, 37, 54, 24],
    [15, 54, 24, 25, 55, 25],
    [42, 54, 24, 1, 55, 25],
    [10, 54, 24, 35, 55, 25],
    [29, 54, 24, 19, 55, 25],
    [44, 54, 24, 7, 55, 25],
    [39, 54, 24, 14, 55, 25],
    [46, 54, 24, 10, 55, 25],
    [49, 54, 24, 10, 55, 25],
    [48, 54, 24, 14, 55, 25],
    [43, 54, 24, 22, 55, 25],
    [34, 54, 24, 34, 55, 25],

    // H
    [1, 26, 9],
    [1, 44, 16],
    [2, 35, 13],
    [4, 25, 9],
    [2, 33, 11, 2, 34, 12],
    [4, 43, 15],
    [4, 39, 13, 1, 40, 14],
    [4, 40, 14, 2, 41, 15],
    [4, 36, 12, 4, 37, 13],
    [6, 43, 15, 2, 44, 16],
    [3, 36, 12, 8, 37, 13],
    [7, 42, 14, 4, 43, 15],
    [12, 33, 11, 4, 34, 12],
    [11, 36, 12, 5, 37, 13],
    [11, 36, 12, 7, 37, 13],
    [3, 45, 15, 13, 46, 16],
    [2, 42, 14, 17, 43, 15],
    [2, 42, 14, 19, 43, 15],
    [9, 39, 13, 16, 40, 14],
    [15, 43, 15, 10, 44, 16],
    [19, 46, 16, 6, 47, 17],
    [34, 37, 13],
    [16, 45, 15, 14, 46, 16],
    [30, 46, 16, 2, 47, 17],
    [22, 45, 15, 13, 46, 16],
    [33, 46, 16, 4, 47, 17],
    [12, 45, 15, 28, 46, 16],
    [11, 45, 15, 31, 46, 16],
    [19, 45, 15, 26, 46, 16],
    [23, 45, 15, 25, 46, 16],
    [23, 45, 15, 28, 46, 16],
    [19, 45, 15, 35, 46, 16],
    [11, 45, 15, 46, 46, 16],
    [59, 46, 16, 1, 47, 17],
    [22, 45, 15, 41, 46, 16],
    [2, 45, 15, 64, 46, 16],
    [24, 45, 15, 46, 46, 16],
    [42, 45, 15, 32, 46, 16],
    [10, 45, 15, 67, 46, 16],
    [20, 45, 15, 61, 46, 16],
  ]

  static getRSBlocks(
    typeNumber: number,
    errorCorrectionLevel: number
  ): QRRSBlock[] {
    const rsBlock = QRRSBlock.getRsBlockTable(typeNumber, errorCorrectionLevel)

    if (rsBlock === undefined) {
      throw new Error(
        `Bad rs block @ typeNumber:${typeNumber}/errorCorrectionLevel:${errorCorrectionLevel}`
      )
    }

    const length = rsBlock.length / 3
    const list: QRRSBlock[] = []

    for (let i = 0; i < length; i++) {
      const count = rsBlock[i * 3 + 0]
      const totalCount = rsBlock[i * 3 + 1]
      const dataCount = rsBlock[i * 3 + 2]

      for (let j = 0; j < count; j++) {
        list.push(new QRRSBlock(totalCount, dataCount))
      }
    }

    return list
  }

  static getRsBlockTable(
    typeNumber: number,
    errorCorrectionLevel: number
  ): number[] {
    switch (errorCorrectionLevel) {
      case 1: // L
        return QRRSBlock.RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 0]
      case 0: // M
        return QRRSBlock.RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 1]
      case 3: // Q
        return QRRSBlock.RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 2]
      case 2: // H
        return QRRSBlock.RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 3]
      default:
        return []
    }
  }
}
